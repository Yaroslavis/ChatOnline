// src/chat/chat.gateway.ts
import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { ChatService } from './chat.service';

@WebSocketGateway({ cors: { origin: '*' } })
export class ChatGateway {
  @WebSocketServer()
  server: Server;

  constructor(private chatService: ChatService) {}

  @SubscribeMessage('message:send')
  async handleMessage(
    @MessageBody() data: { chatId: number; userId: number; text: string },
    @ConnectedSocket() client: Socket,
  ) {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', data);

    if (!data.userId) {
      console.log('‚ùå userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏');
      return;
    }

    const message = await this.chatService.saveMessage(
      data.chatId,
      data.userId,
      data.text,
    );

    // üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –≤ —á–∞—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.server.emit('message:receive', message);
  }
}
